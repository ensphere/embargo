{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["/**\n * Laravel Routes\n * @type {{route}}\n */\nvar LaravelRoutes = new function() {\n\n    var routes = null;\n\n    /**\n     * Load JSON\n     * @param path\n     * @param success\n     * @param error\n     */\n    var loadJSON = function( path, success, error )\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function()\n        {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                if (xhr.status === 200) {\n                    if (success)\n                        success(JSON.parse(xhr.responseText));\n                } else {\n                    if (error)\n                        error(xhr);\n                }\n            }\n        };\n        xhr.open( \"GET\", path, false );\n        xhr.send();\n    };\n\n    /**\n     * Get Router\n     * @param name\n     * @param callback\n     * @returns {*}\n     */\n    var getRouter = function( name, callback )\n    {\n        if( typeof routes[ name ] !== 'undefined' ) {\n            return callback( routes[ name ] );\n        } else {\n            console.log( 'route [' + name + '] does not exist' );\n        }\n    };\n\n    /**\n     * Generate Route Uri\n     * @param router\n     * @param _parameters\n     * @returns {string}\n     */\n    var generateRouteUri = function( router, _parameters )\n    {\n        var parameters = _parameters || [];\n        router.uri = router.path;\n        router.uri_variables.forEach( function( variable ) {\n            var replaceWith = parameters.shift() || null;\n            var rExpression = new RegExp( \"{\" + variable + \"\\\\??}\", \"g\" );\n            router.uri = router.uri.replace( rExpression, replaceWith );\n        });\n        return '/' + router.uri;\n    };\n\n    loadJSON( window.routesUrl ? window.routesUrl : '/routes.json', function( data ) {\n        routes = data;\n    });\n\n    return {\n        route : function( name, parameters )\n        {\n            return getRouter( name, function ( router ) {\n                return generateRouteUri( router, parameters );\n            });\n        }\n    }\n\n};\n\n\n/**\n * Ensphere Container\n */\n$.fn.ensphere = new function() {\n\n    /**\n     *\n     * @type {embargo}\n     */\n    this.embargo = new function() {\n\n        /**\n         * GUID\n         * @returns {string}\n         */\n        var guid = function()\n        {\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n        };\n\n        /**\n         * S4\n         * @returns {string}\n         */\n        var s4 = function()\n        {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        };\n\n        /**\n         * Remove Page Loader\n         */\n        var removePageLoader = function()\n        {\n            var loader = $('#loader');\n            if( loader.length ) {\n                loader.fadeOut( 200, function(){\n                    $(this).remove();\n                });\n            }\n        };\n\n        /**\n         * Distribute Api Requests\n         */\n        var distributeApiRequests = function()\n        {\n            var methods = [];\n            $('[data-api]').each( function(){\n                var _guid = guid();\n                $(this).attr( 'data-guid', _guid );\n                var _data = {\n                    method : $(this).attr( 'data-api' ),\n                    callback : $(this).attr( 'data-api-callback' ),\n                    modelId : $(this).attr( 'data-model-id' ),\n                    guid : _guid\n                };\n                if( $(this).attr( 'data-api-data' ) ) {\n                    _data.data = $(this).attr( 'data-api-data' );\n                }\n                methods.push( _data );\n            });\n            if( ! methods.length ) return;\n            $.get( '/api/render', { actions : methods, from : window.location.href }, function( responses ) {\n                for( var i in responses ) {\n                    if( typeof window[responses[i].callback] !== 'undefined' ) {\n                        window[responses[i].callback](responses[i].response, $('[data-guid=\"' + responses[i].guid + '\"]') );\n                    } else {\n                        console.log( '[API Renderer] ' + responses[i].callback + ' is not a valid api callback' );\n                    }\n                }\n            });\n        };\n\n        /**\n         * Responsive Images\n         */\n        var responsiveImages = function()\n        {\n\n            var parser = document.createElement('a');\n            var width = $(window).width();\n            var onLoadBreakPoint = 0;\n            var selectedBreakPoints = [ 1500, 1200, 992, 768, 480 ];\n\n            /**\n             * Get Break Point\n             * @returns {number}\n             */\n            var getBreakPoint = function()\n            {\n                var breakPoint = 0;\n                selectedBreakPoints.forEach( function ( point ) {\n                    if( width >= point && ! breakPoint ) {\n                        breakPoint = point;\n                    }\n                });\n                return breakPoint;\n            };\n\n            /**\n             * Reload THe Images\n             */\n            window.reloadImages = function()\n            {\n                $('[data-responsive]').each( function() {\n                    if( $( this ).prop( 'tagName' ).toLowerCase() === 'img' ) {\n                        parser.href = $( this ).attr( 'src' );\n                        $( this ).attr( 'src', parser.pathname + ( onLoadBreakPoint ? '?r=' + onLoadBreakPoint : '' ) );\n                    } else {\n                        var img = $( this ).css( 'background-image' ).replace( /(url\\(|\\)|\")/g, '' );\n                        if( img ) {\n                            parser.href = img;\n                            var url = String( parser.pathname + ( onLoadBreakPoint ? '?r=' + onLoadBreakPoint : '' ) );\n                            $( this ).css( 'background-image', 'url(' + url + ')' );\n                        }\n                    }\n                });\n            };\n\n            /**\n             * Resize Handler\n             */\n            window.onWindowResizeHandleImageSizes = function()\n            {\n                width = $(window).width();\n                var newBreakPoint = parseInt( getBreakPoint() );\n                if( newBreakPoint !== onLoadBreakPoint ) {\n                    onLoadBreakPoint = newBreakPoint;\n                    reloadImages();\n                }\n            };\n\n            $(window).on( 'resize.responsive', onWindowResizeHandleImageSizes );\n            window.onWindowResizeHandleImageSizes();\n\n        };\n\n        /**\n         * Sets up ajax calls\n         */\n        var ajaxSetup = function()\n        {\n            var _token = $('[name=\"csrf-token\"]');\n            if( _token.length ) {\n                $.ajaxSetup({\n                    headers: {\n                        'X-CSRF-Token': _token.attr( 'content' )\n                    }\n                });\n            }\n        };\n\n        /**\n         * On Document Ready\n         */\n        var onDocumentReady = function()\n        {\n            distributeApiRequests();\n            responsiveImages();\n            ajaxSetup();\n        };\n\n        /**\n         * On Window Load\n         */\n        var onWindowLoad = function()\n        {\n            removePageLoader();\n        };\n\n        $(document).ready( onDocumentReady );\n        $(window).load( onWindowLoad );\n\n        return {\n\n            route : function( name, parameters )\n            {\n                return LaravelRoutes.route( name, parameters );\n            }\n\n        }\n\n    };\n};\n"]}